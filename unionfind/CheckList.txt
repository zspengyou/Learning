http://algs4.cs.princeton.edu/code/javadoc/
Specification:
Percolation. :
The model. 
	N-by-N grid of sites
	open or blocked
	full site => an open site can be connected to an open site in the top row via a chain of neighboring open sites
	percolate => there is a full site in the bottom row
The problem.
	sites are independently set to be open with probability p  (vacancy probability p)
Percolation data type. 	
	public class Percolation {
	   public Percolation(int n)               // create n-by-n grid, with all sites blocked
	   public void open(int i, int j)          // open site (row i, column j) if it is not open already
	   public boolean isOpen(int i, int j)     // is site (row i, column j) open?
	   public boolean isFull(int i, int j)     // is site (row i, column j) full?
	   public boolean percolates()             // does the system percolate?
	
	   public static void main(String[] args)  // test client (optional)
	}
Corner cases.		
	By convention, the row and column indices i and j are integers between 1 and n, 
	where (1, 1) is the upper-left site: 
	Throw a java.lang.IndexOutOfBoundsException if any argument to open(), isOpen(), or isFull() is outside its prescribed range. 
	The constructor should throw a java.lang.IllegalArgumentException if n <= 0.
	
Performance requirements. 
	The constructor should take time proportional to N2; 
	all methods should take constant time plus a constant number of calls to the union-find methods union(), find(), connected(), and count().

Monte Carlo simulation. 
	Initialize all sites to be blocked.
	Repeat the following until the system percolates:
	Choose a site (row i, column j) uniformly at random among all blocked sites.
	Open the site (row i, column j).
	The fraction of sites that are opened when the system percolates provides an estimate of the percolation threshold.
	
	

calculation
	meam: miu
	standard deviation: rou
	95% confidence interval: 
public class PercolationStats {
   public PercolationStats(int n, int trials)    // perform trials independent experiments on an n-by-n grid
   public double mean()                          // sample mean of percolation threshold
   public double stddev()                        // sample standard deviation of percolation threshold
   public double confidenceLo()                  // low  endpoint of 95% confidence interval
   public double confidenceHi()                  // high endpoint of 95% confidence interval

   public static void main(String[] args)    // test client (described below)
}
The constructor should throw a java.lang.IllegalArgumentException if either n <= 0 or trials <= 0.
% java PercolationStats 200 100
mean                    = 0.5929934999999997
stddev                  = 0.00876990421552567
95% confidence interval = 0.5912745987737567, 0.5947124012262428

Analysis of running time and memory usage (optional and not graded). 
	Implement the Percolation data type using the quick find algorithm in QuickFindUF. WeightedQuickUnionUF.
		Use Stopwatch to measure the total running time of PercolationStats for various values of n and trials. 
			How does doubling n affect the total running time? How does doubling trials affect the total running time? 
			Give a formula (using tilde notation) of the total running time on your computer (in seconds) as a single function of both n and trials.
		Using the 64-bit memory-cost model from lecture, 
			give the total memory usage in bytes (using tilde notation) that a Percolation object uses to model an n-by-n percolation system. 
			Count all memory that is used, including memory for the union-find data structure.
	
Deliverables.
	Submit only Percolation.java (using the weighted quick-union algorithm from WeightedQuickUnionUF) and PercolationStats.java. 
	We will supply algs4.jar. 
	Your submission may not call library functions except those in StdIn, StdOut, StdRandom, StdStats, WeightedQuickUnionUF, and java.lang.	
	
For fun. 
	Create your own percolation input file and share it in the discussion forums. For some inspiration, do an image search for "nonogram puzzles solved."	
	
CheckList
	Add algs4.jar to your Java classpath.
	Enter command-line arguments.
	Use standard input and standard output (and, ideally, redirect them to or from a file).
FUNDAMENTALS
SORTING
SEARCHING
GRAPHS
STRINGS
CONTEXT
BEYOND
Standard input and output libraries. 

if (i <= 0 || i > n) throw new IndexOutOfBoundsException("row index i out of bounds");
Your code should not attempt to catch any exceptions—this will interfere with our grading scripts.

What are the goals of this assignment?

	Set up a Java programming environment.
	Use our input and output libraries.
	Learn about a scientific application of the union–find data structure.
	Measure the running time of a program and use the doubling hypothesis to make predictions.
	Measure the amount of memory used by a data structure
	
How many lines of code should my program be? 
	You should strive for clarity and efficiency. 
	Our reference solution for Percolation.java is about 70 lines, plus a test client. 
	Our PercolationStats.java client is about 50 lines. 
	If you are re-implementing the union-find data structure (instead of reusing the implementations provided), you are on the wrong track.

Write a private method for validating indices. 
	Since each method is supposed to throw an exception for invalid indices, you should write a private method which performs this validation process.


Programming Tricks and Common Pitfalls
	Do not write your own union–find data structure. Use WeightedQuickUnionUF instead.
	Your Percolation class must use WeightedQuickUnionUF. 
		Otherwise, it will fail the timing tests, as the autograder intercepts and counts calls to methods in WeightedQuickUnionUF.
	It's OK to use an extra row and/or column to deal with the 1-based indexing of the percolation grid. 
		Though it is slightly inefficient, it's fine to use arrays or union-find objects that are slightly larger than strictly necessary. Doing this results in cleaner code at the cost of slightly greater memory usage.
	Each of the methods (except the constructor) in Percolation must use a constant number of union-find operations. 
		If you have a for loop inside of one of your Percolation methods, you're probably doing it wrong. Don't forget about the virtual-top / virtual-bottom trick described in lecture.

